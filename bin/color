#!/bin/sh
# Its like grep but doesn't filter out lines & each search term gets its own color!
#
# Example usages:
#   while date; do sleep 1; done |                               color '^[A-Z][a-z][a-z]'            ' [A-Z][a-z][a-z]'  ':[0-9][0-9]:' '[0-9]'{0..9}' '
#   while date; do sleep 1; done |                               color '^[A-Z][a-z][a-z]' SKIP_GREEN ' [A-Z][a-z][a-z]'  ':[0-9][0-9]:' '[0-9]'{0..9}' '
#   while date; do sleep 1; done |                      COLOR=42 color '^[A-Z][a-z][a-z]'            ' [A-Z][a-z][a-z]'  ':[0-9][0-9]:' '[0-9]'{0..9}' '
#   while date; do sleep 1; done | COLOR_EFFECTS="3;4;" COLOR=42 color '^[A-Z][a-z][a-z]'            ' [A-Z][a-z][a-z]'  ':[0-9][0-9]:' '[0-9]'{0..9}' '

COLOR=${COLOR:-31}                 # Defaults to red
COLOR_EFFECTS=${COLOR_EFFECTS:-1;} # Defaults to bold
SKIP_COLORS=${SKIP_COLORS:-"$(seq --separator=' ' 37 40) $(seq --separator=' ' 47 90) 98 99 103"}
MAX_COLOR=${MAX_COLOR:-106}
MIN_COLOR=${MIN_COLOR:-$COLOR}


next_color() {
  color=$(($1+1)) 

  while echo "$SKIP_COLORS" | grep -w -q "$color"; do
    color=$((color+1))
  done

  [ "$color" -gt "$MAX_COLOR" ] && echo "$MIN_COLOR" || echo "$color"
}

color() { pattern="$1"
# >&2 echo "pattern=[$pattern]"
  GREP_COLOR="${COLOR_EFFECTS}${COLOR}" grep -E --color=always --line-buffered "${pattern}|$" | {
    shift
    if [ $# -gt 0 ]; then
      COLOR="$(next_color "$COLOR")" color "$@"
    else
      cat
    fi
  }
}

if [ $# -gt 0 ]; then
  color "$@"
else
  cat
fi
