#!/usr/bin/env bash--script
# --help
## color
#
# Its like grep but doesn't filter out lines & each search term gets its own color!
#
### EXAMPLES
# * `echo hello world             |                               color he                 wo         lo`
# * `while date; do sleep 1; done |                               color '^[A-Z][a-z][a-z]'            ' [A-Z][a-z][a-z]'  ':[0-9][0-9]:' '[0-9]'{0..9}' '`
# * `while date; do sleep 1; done |                               color '^[A-Z][a-z][a-z]' SKIP_GREEN ' [A-Z][a-z][a-z]'  ':[0-9][0-9]:' '[0-9]'{0..9}' '`
# * `while date; do sleep 1; done |                      COLOR=42 color '^[A-Z][a-z][a-z]'            ' [A-Z][a-z][a-z]'  ':[0-9][0-9]:' '[0-9]'{0..9}' '`
# * `while date; do sleep 1; done | COLOR_EFFECTS="3;4;" COLOR=42 color '^[A-Z][a-z][a-z]'            ' [A-Z][a-z][a-z]'  ':[0-9][0-9]:' '[0-9]'{0..9}' '`

COLOR=${COLOR:-31}                 # Defaults to red
COLOR_EFFECTS=${COLOR_EFFECTS:-1;} # Defaults to bold
SKIP_COLORS=${SKIP_COLORS:-"$(seq -s' ' 37 40) $(seq -s' ' 47 90) 98 99 103"}
MAX_COLOR=${MAX_COLOR:-106}
MIN_COLOR=${MIN_COLOR:-$COLOR}

next_color() {
  color=$(($1+1))

  while echo "$SKIP_COLORS" | grep -w -q "$color"; do
    color=$((color+1))
  done

  [ "$color" -lt "$MAX_COLOR" ] && echo "$color"
}

color() { pattern="${1:-}"
  # >&2 echo "COLOR=[$COLOR] pattern=[$pattern]"
  if [ $# -gt 0 ]; then
    GREP_COLOR="${COLOR_EFFECTS}${COLOR}" GREP_COLORS="mt=${COLOR_EFFECTS}${COLOR}" grep -E --color=always --line-buffered "${pattern}|$" | {
      shift
      COLOR="$(next_color "$COLOR" || echo "$MIN_COLOR")" color "$@"
    }
  else
    cat
  fi
}

color_count() {
  # Nb. currently there's only `25` colors, but lets figure it out dynamically in case our code changes...
  local colors=("$COLOR")
  while COLOR="$(next_color "$COLOR")"; do
    colors+=("$COLOR")
  done
  echo $((${#colors[@]} + 1))
}


# From ChatGPT (2024-04-22)...
# Given arguments
# eg.
# ```
# foo bar baz biz buz goo gar giz guz
# ```
# Group them together based on a COUNT
# So,
# * `COUNT=3`
# ```
# (foo|bar|baz) (biz|buz|goo) (gar|giz|guz)
# ```
# * `COUNT=2`
# ```
# (foo|baz|buz|gar|guz) (bar|biz|goo|giz)
# ```
# * `COUNT=1`
# ```
# (foo|bar|baz|biz|buz|goo|gar|giz|guz)
# ```
color_grouped() { local args=("$@")
  COLOR_COUNT=${COLOR_COUNT:-$(color_count)}

  # Initialize arrays for groups
  declare -a groups

  # Calculate the length of args array
  args_length=${#args[@]}

  # Distribute arguments into groups based on COUNT
  for (( i=0; i<args_length; i++ )); do
    local group_index=$((i % COLOR_COUNT))
    if [ -z "${groups[group_index]:-}" ]; then
      groups[group_index]="${args[i]}"
    else
      groups[group_index]+="|${args[i]}"
    fi
  done

  # put surrounding braces around the groups
  for (( i=0; i<COLOR_COUNT; i++ )); do
    if [ -n "${groups[i]:-}" ]; then
      groups[i]="(${groups[i]})"
    fi
  done

  ${DEBUG:-false} && echo groups: "${groups[@]}"
  color "${groups[@]}"
}

# color "$@"
color_grouped "$@"
