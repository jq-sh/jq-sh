#!/usr/bin/env jq-sh

opts --null-input --raw-input --raw-output

arg       title                "${title}"
arg_int   max_width            ${max_width:-${COLUMNS:-0}}
arg_jsonl truncations          $@

__JQ__


# Pending - https://github.com/stedolan/jq/pull/2478
def debug(msg): (msg | debug) as $debug | .;

def truncate(max; end_size):
  if length > max then
    "\(.[0:(max-end_size-3)])...\(.[-end_size:])"
  else
    .
  end
;
def truncate(max): truncate(max; 2);

def sorted_cell_widths:
  map(map(length)) |
  transpose        |
  map(sort)
;

def width_diffs:
  map(
    sort as $sorted_lengths |
    [
      range(0; length) |
      $sorted_lengths[.] - (if . > 0 then $sorted_lengths[.-1] else 0 end)
    ]
  )
;

def sum_max_cell_widths:
  map(last) | add
;

def col_to_shrink:
  map(last) |
  [
    foreach .[] as $i (-1; .+1;
      [$i, .]
    )
  ] |
  max[1]
;

def shrink_cell_widths(target_col_width_sum; col_width_sum):
  # Uncomment this to debug the cell width shrinking
  # debug({ col_width_sum: col_width_sum, widths: .}) |

  if col_width_sum <= target_col_width_sum then
    # The final base case adds all the width differences together
    # to get a final width for each column
    map(add)
  else
    col_to_shrink                          as $col_to_shrink       |
    .[$col_to_shrink][-1]                  as $available_shrinkage |
    (col_width_sum - target_col_width_sum) as $shrinkage           |

    if $shrinkage > $available_shrinkage then
      # If there is still more shrinking to do then remove the last difference
      del(.[$col_to_shrink][-1])
    else
      # Else there is got just enough shrinkage so subtract it from the last difference
      .[$col_to_shrink][-1] -= $shrinkage
    end |

    # Recurse with a new sum of column widths
    shrink_cell_widths(
      target_col_width_sum;
      col_width_sum - (if $shrinkage > $available_shrinkage then $available_shrinkage else $shrinkage end)
    )
  end
;

def truncate_cells(cell_widths):
  map(
    [
      foreach .[] as $cell (-1; . + 1;
        cell_widths[.] as $width |
        if $width then
          $cell | truncate($width)
        else
          $cell
        end
      )
    ]
  )
;

def col_sizes:
  transpose | map(map(length) | max)
;

def pad_col:
  . as [$col, $size]  |
  ($size - ($col | length)) |
  "\($col)\(if . > 0 then " " * . else "" end)"
;

def pad_row(col_sizes):
  [., col_sizes] |
  transpose      |
  map(pad_col)
;

# Although it works fin in jq-1.6, there's some kind of weird bug with `gsub`
# in jq-1.5 (which is the default version in ubuntu), so we'll hack around it.
def gsub_bug_in_jq1_5(regex; str):
  split("") |
  map(sub(regex; str)) |
  join("")
;

def build_border(chars):
  "\(chars[0])\(gsub_bug_in_jq1_5("│"; chars[1]))\(chars[2])"
;

def title:
  (if ($title|length) > 0 then "[1m\($title)[0m" else empty end)
;

def table(col_sizes):
  map(pad_row(col_sizes)) |
  map(join("│")) |
  [.[0], .[1:]] as [$headers, $rows] |
  ( $headers | gsub_bug_in_jq1_5("[^│]"; "─")) as $border |
  [
    ($border  | build_border(["┌", "┬", "┐"])),
    ($headers | "│[1m\(gsub_bug_in_jq1_5("│"; "[0m│[1m"))[0m│"),
    ($border  | build_border(["├", "┼", "┤"]))
  ] +
  ( $rows | map("│\(.)│")) +
  [
    ($border | build_border(["└","┴", "┘"]))
  ] |
  join("\n")
;


[ inputs | split("\t") ]  |

truncate_cells($truncations) |

if $max_width > 0 then
  sorted_cell_widths as $sorted_cell_widths |

  truncate_cells(
    $sorted_cell_widths |
    width_diffs         |
    shrink_cell_widths(
      ($max_width - ($sorted_cell_widths | length - 1) * 2 + 1);
      ($sorted_cell_widths | sum_max_cell_widths)
    )
  )
else
  .
end |

col_sizes as $col_sizes |
title, table($col_sizes)
