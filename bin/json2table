#!/usr/bin/env bash--script
# --help
## json2table [col...]
#
# For examples see:
# * https://github.com/jq-sh/jq-sh/blob/main/screencasts/json2table.md
# * https://github.com/jq-sh/jq-sh/blob/main/shpecs/json2table_shpec.sh

if [[ -f "${1:-}" ]]; then
  table_script="$1"; shift
  _resource="${table_script/*\/}"
else
  _resource="${resource:-${BASH_SOURCE[0]/*\/}}"
fi
resource="${resource:-${_resource%.table}}"


# Nb. `eval echo "$cols"` allows x.{y1,y2} expansion
# COLS=$(eval echo "${cols:-${@:-}}")

args="${*:-}"

shopt -s extglob
case $args in
  *[=!\>\<]**) sort_by="${sort_by:-} $args" ;;
  *          ) cols="${cols:-$args}"       ;;
esac
# info "args=[${args:-}]"
# info "cols=[${cols:-}]"
# info "sort_by=[${sort_by:-}]"

COLS="${cols:-}"
SORT_BY=${sort_by:-}
MISSING_KEY=${MISSING_KEY:-Â¿}
TITLE=${title:-}

color_missing() {
  COLOR=41 color "$MISSING_KEY"
}

source_script() {
  # Not sure why this doesn't work
  # source <(sed -n '/^#/, /^__JQ__$/{//!p;}' "$1")
  # ... so we'll just go with a temp file...
  TEMP_FILE=$(mktemp)
  sed -n '/^#/, /^__JQ__$/{//!p;}' "$1" > "$TEMP_FILE"
  # shellcheck disable=SC1090
  source "$TEMP_FILE"
}

cols_for() { local resource="${1:-}"
  {
    key="${resource}_cols[@]"
    resource_cols="${!key:-}"
    if [[ -z "${resource_cols:-}" ]]; then
      echo "${COLS:-${cols[@]:-}}"
    else
      echo "${resource_cols}"
    fi

    key_add="${resource}_cols_add[@]"
    resource_cols_add=${!key_add:-}
    if [[ -z "${resource_cols_add:-}" ]]; then
      echo "${cols_add[@]:-}"
    else
      echo "${resource_cols_add}"
    fi
  } |
    xargs
}


sort_by_for() { local resource="${1:-}"
  key="${resource}_sort_by[@]"
  resource_sort_by=${!key:-}
  if [[ -z "${resource_sort_by:-}" ]]; then
    echo "${SORT_BY:-${sort_by[@]:-}}"
  else
    echo "${resource_sort_by}"
  fi
}

title_for() { local resource="${1:-}"
  key="${resource}_title"
  resource_title=${!key:-}
  if [[ -z "${resource_title:-}" ]]; then
    echo "${TITLE:-${title:-}}"
  else
    echo "${resource_title}"
  fi
}

term() {
  for term in "$@"; do
    [[ -n "$term" ]] && echo "\b$term\b"
  done
}

RE_TZ="(Z|.[0-2][0-9]:[0-5][0-9])"
RE_SEC="[0-5][0-9]"
RE_MIN="[0-5][0-9]"
RE_HOUR="[0-2][0-9]"
RE_DAY="[0-3][0-9]"
RE_MONTH="[0-1][0-9]"
RE_YEAR="20[0-9][0-9]"
RE_YEAR_MONTH="${RE_YEAR}-${RE_MONTH}"
RE_YEAR_MONTH_DAY="${RE_YEAR_MONTH}-${RE_DAY}"
RE_YEAR_MONTH_DAY_HOUR="${RE_YEAR_MONTH_DAY}T${RE_HOUR}"
RE_YEAR_MONTH_DAY_HOUR_MIN="${RE_YEAR_MONTH_DAY_HOUR}:${RE_MIN}"
RE_SEC_TZ="${RE_SEC}${RE_TZ}"
RE_MIN_SEC_TZ="${RE_MIN}:${RE_SEC_TZ}"
RE_HOUR_MIN_SEC_TZ="${RE_HOUR}:${RE_MIN_SEC_TZ}"
RE_DAY_HOUR_MIN_SEC_TZ="${RE_DAY}T${RE_HOUR_MIN_SEC_TZ}"
RE_MONTH_DAY_HOUR_MIN_SEC_TZ="${RE_MONTH}-${RE_DAY_HOUR_MIN_SEC_TZ}"
colorize_timestamps() {
  case ${COLORIZE_TIMESTAMPS:-} in
    true|TRUE|1) COLORIZE_TIMESTAMPS=SEC ;;
    *) ;;
  esac
  case ${COLORIZE_TIMESTAMPS:-} in
    SEC  ) term "${RE_YEAR_MONTH_DAY_HOUR_MIN}:[0-5]"{0..9}"${RE_TZ}"  ;;
    MIN  ) term "${RE_YEAR_MONTH_DAY_HOUR}:[0-5]"{0..9}":${RE_SEC_TZ}" ;;
    HOUR ) term "${RE_YEAR_MONTH_DAY}T[0-2]"{0..9}":${RE_MIN_SEC_TZ}"  ;;
    DAY  ) term "${RE_YEAR_MONTH}-[0-3]"{0..9}"T${RE_HOUR_MIN_SEC_TZ}" ;;
    MONTH) term "${RE_YEAR}-[0-1]"{0..9}"-${RE_DAY_HOUR_MIN_SEC_TZ}"   ;;
    YEAR ) term "20[0-9]"{0..9}"-${RE_MONTH_DAY_HOUR_MIN_SEC_TZ}"      ;;
  esac
}

# TODO - DRY this up...
color_terms_for() { local resource=$1
  term "(false|FALSE|FAILURE)"
  term "(true|TRUE|SUCCESS)"
  term null

  color_terms_key="${resource}_color_terms[@]"
  resource_color_terms=( "${!color_terms_key:-}" )
  if [[ -n "${resource_color_terms_str}" ]]; then
    # shellcheck disable=SC2116,2207
    resource_color_terms=( $(echo "${resource_color_terms_str}") )
    # TODO - maybe try something like the following...
    # IFS=$'\n' read -r -a resource_color_terms <<< "${resource_color_terms_str}"

    term "${resource_color_terms[@]}"
  else
    if [[ -z "${resource_color_terms[*]}" ]]; then
      if [[ -n "${color_terms_str}" ]]; then
        # shellcheck disable=SC2116,SC2207
        color_terms=( $(echo "${color_terms_str}") )
        # TODO - maybe try something like the following...
        # IFS=$'\n' read -r -a color_terms <<< "${color_terms_str}"

        term "${color_terms[@]:-}"
      else
        term "${color_terms[@]:-}"
      fi
    else
      term "${resource_color_terms[@]}"
    fi
  fi

  color_terms_add_key="${resource}_color_terms_add[@]"
  resource_color_terms_add=( "${!color_terms_add_key:-}" )
  if [[ -n "${resource_color_terms_add_str}" ]]; then

    # shellcheck disable=SC2116,SC2207
    resource_color_terms_add=( $(echo "${resource_color_terms_add_str}") )
    # TODO - maybe try something like the following...
    # IFS=$'\n' read -r -a resource_color_terms_add <<< "${resource_color_terms_add_str}"

    term "${resource_color_terms_add[@]}"
  else
    if [[ -z "${resource_color_terms_add[*]}" ]]; then
      if [[ -n "${color_terms_add_str}" ]]; then
        # shellcheck disable=SC2116,SC2207
        color_terms_add=( $(echo "${color_terms_add_str}") )
        # TODO - maybe try something like the following...
        # IFS=$'\n' read -r -a color_terms_add <<< "${color_terms_add_str}"

        term "${color_terms_add[@]}"
      else
        term "${color_terms_add[@]:-}"
      fi
    else
      term "${resource_color_terms_add[@]}"
    fi
  fi

  colorize_timestamps
}

color_terms_str=${color_terms:-}
color_terms_str_key="${resource}_color_terms"
resource_color_terms_str="${!color_terms_str_key:-}"
color_terms_add_str=${color_terms_add:-}
color_terms_add_str_key="${resource}_color_terms_add"
resource_color_terms_add_str="${!color_terms_add_str_key:-}"

if [[ -f "${table_script:-}" ]]; then
  source_script "$table_script"
fi

if [[ ${conf:-} = "${TILDA:-~}" ]]; then
  conf="${TILDA:-~}/.json2table/${resource:-}.conf"
fi

# shellcheck disable=SC1090
if [[ -f "${conf:-}" ]]; then
  source "$conf"
fi

# shellcheck disable=SC2207
cols=( $(cols_for "${resource:-}") )
# info "cols[${#cols}]=[${cols[*]:-}]"

# shellcheck disable=SC2207
sort_by=( $(sort_by_for "${resource:-}") )
# info "sort_by=[${sort_by[*]:-}]"

title=$(title_for "${resource:-}")


# Nb. unlike cols & sort_by color_terms can have spaces in them
# so have to be handled differently
IFS0=$IFS; IFS=$'\n'; for term in $(color_terms_for "${resource:-}"); do
  color_terms_a+=( "$term" )
done; IFS=$IFS0
# >&2 echo "color_terms_a=[${color_terms_a[*]}]"


tables() {
  unset resources
  tee >(
    if [ $# -gt 1 ]; then
      shift
      tables "$@"
    fi
  ) >(title="$1" resource="$1" json2table) > /dev/null | cat
}


if [[ -n "${sort_by:-}" ]]; then
  debug sort_by="'${sort_by[*]:-}'"
fi

if [[ -n "${resources:-}" ]]; then
  # shellcheck disable=SC2086
  sort_by="${sort_by:-}" cols="${cols:-}" tables $resources
else
  if [[ -f "${table_script:-}" ]]; then
    jq-sh "$table_script"
  else
    cat
  fi |
    # color_terms_a="$(IFS=$'\n'; echo "${color_terms_a[*]}")" \
    color_terms=$( IFS=$'\n'; echo "${color_terms_a[*]}" ) \
    sort_by="${sort_by[*]:-}"      \
    cols="${cols[*]:-}"            \
    resource="$resource"           \
    title="$title"                 \
    json2table.jqsh
fi
