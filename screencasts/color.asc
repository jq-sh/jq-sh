#!/usr/bin/env asciinema-rec_script

# First we'll create a multi-line string...
str=$(echo "atom ant"; echo "banana man"; echo "cat woman")
echo "$str"

# `grep` can filter lines containing search terms in that string
echo "$str" | grep -E banana

# However with a simple trick it can be used to highlight words
# without filtering out the other lines...
echo "$str" | grep -E 'banana|$'

# This is because `'banana|$'` will match (and highlight) lines containing either:
#  `'banana'` or `` (nothing)

# And its also possible to change the colour of highlighted word:
echo "$str" | GREP_COLOR='1;31' grep -E --color=always 'banana|$'

# And _then_ its possible for us to set _another_ colour
# by sending that output through _another_ grep
echo "$str" | GREP_COLOR='1;31' grep -E --color=always 'banana|$' | GREP_COLOR='1;32' grep -E --color=always 'cat|$'

# ðŸ¤” ... but why not just write a recursive function to do all that for us?
# ... enter the `color` command...
echo "$str" | color ant banana cat

# To change the colour effect:
echo "$str" | COLOR_EFFECTS="2;" color ant banana cat

# To skip green (32) & yellow (33) (eg. if they don't show up well in your terminal):
echo "$str" | SKIP_COLORS="32 33" color ant banana cat

# Nb. `color` uses line buffering by default so it should be able to stream input into it...
for i in {1..5}; do date; sleep 1; done | color '^[A-Z][a-z][a-z]' ' [A-Z][a-z][a-z]'  ':[0-9][0-9]:' '[0-9]'{0..9}' '

