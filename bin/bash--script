#!/usr/bin/env bash
set -euo pipefail

# color palette
COLOR_ERROR=${COLOR_ERROR:-31}; level_error=0
COLOR_WARN=${COLOR_WARN:-44}  ;  level_warn=1
COLOR_INFO=${COLOR_INFO:-34}  ;  level_info=2
COLOR_CMD=${COLOR_CMD:-1}     ;   level_cmd=3
COLOR_DEBUG=${COLOR_DEBUG:-2} ; level_debug=4

COLOR_PALETTE="${COLOR_PALETTE:-$COLOR_ERROR $COLOR_WARN $COLOR_INFO $COLOR_CMD $COLOR_DEBUG}"
read -r -a colors <<< "$COLOR_PALETTE"

log_level() {
  if   ${QUIET:-false}; then
    echo $level_warn
  elif ${SHOW_CMD:-false} || ${VERBOSE:-false}; then
    echo $level_cmd
  elif ${DEBUG:-false}; then
    echo $level_debug
  else
    echo $level_info
  fi
}
LOG_LEVEL=${LOG_LEVEL:-$(log_level)}

markdown_highlighter() {
  if command -v bat > /dev/null 2>&1; then
    echo "bat --color=always --style=${BAT_STYLE:-plain} --language=markdown"
  else
    echo cat
  fi
}

timestamp() {
  date -u +"${DATE_FORMAT:-%Y-%m-%dT%H:%M:%SZ}"
}

println() {
  ifs0="$IFS"; IFS=""
  i=0
  while read -r line; do
    (( i++ ))
    # shellcheck disable=SC2154
    for word in ${redact:-}; do
      line="${line/${word}/â–ˆâ–ˆâ–ˆâ–ˆâ–ˆ}"
    done
    >&2 echo -e "$(${return_cursor:-false} && printf "\r")$(if [ $i -eq 1 ]; then echo "[$(timestamp)] "; else : ; fi)[${color:-${colors[level_info]}}m${line}[0m"
  done < <(echo -e "$@")
  IFS="$ifs0"
}

info_r() {
  return_cursor=true info "$@"
}

info() {
  if [[ LOG_LEVEL -ge level_info ]]; then
    color="${color:-${colors[level_info]}}" println "$@"
  fi
}

warn() {
  if ${WARN:-false} || [[ LOG_LEVEL -ge level_warn ]]; then
    color="${color:-${colors[level_warn]}}" println "$@"
  fi
}

debug() {
  if ${DEBUG:-false} || [[ LOG_LEVEL -ge level_debug ]]; then
    color=${color:-${colors[level_debug]}} println "$@"
  fi
}

error() {
  color=${color:-${colors[level_error]}} println "$@"
  ${without_help:-true} && exit $WITHOUT_HELP || exit "${EXIT_CODE:-1}"
}

print() {
  >&2 printf '%s' "$@"
}

strip_color() {
  sed -E "s/"$'\E'"\[([0-9]{1,3}((;[0-9]{1,3})*)?)?[m|K]//g"
}

eval_cmd() {
  if ${SHOW_CMD:-true} || [[ LOG_LEVEL -ge level_cmd ]]; then
    color="${color:-${colors[level_cmd]}}" info "$@"
  fi
  eval "$(strip_color <<< "$*")"
}

cmd() {
  basename "$SCRIPT"
}

version() {
  grep '^# --version' "$SCRIPT" | sed 's/^# --version[ ]*//' ||
  date -r "$SCRIPT" "+%Y.%m.%d"
}

cmd_and_version() {
  echo "$(cmd) (v$(version))"
}

help() {
  printf "[1m%s[22m\n\n" "$(cmd_and_version)"

  sed -n -e '/^# --help$/,/^$/{/^# --help$/d;/--help/d;p;}' < "$SCRIPT"  |
    # strip blank lines & stuff
    sed -E 's/^#( |[ ]*$)//g; $d' |
    ${MARKDOWN:=$(markdown_highlighter)}
}


WITHOUT_HELP=42 # special exit code to exit without printing help message
SCRIPT="${SCRIPT:-$1}"; shift

case "${1:-}" in
  -h|--help)
    help
  ;;
  -v|--version)
    cmd_and_version
  ;;
  *)
    # shellcheck disable=SC1090
    ( source "$SCRIPT" "$@" ) || {
      exit_code=$?
      # only print help if the parent was a shell
      # ie. to avoid *also* printing help for commands that call other bash--script subcommands
      [[ $(ps -o args= $PPID) =~ (bash|fish|zsh)$ ]] && [[ $exit_code -ne $WITHOUT_HELP ]] && help
      exit $exit_code
    }
  ;;
esac

