#!/usr/bin/env bash
set -euo pipefail

markdown_highlighter() {
  if command -v bat > /dev/null 2>&1; then
    echo "bat --color=always --style=${BAT_STYLE:-plain} --language=markdown"
  else
    echo cat
  fi
}

timestamp() {
  date +"${DATE_FORMAT:-%Y-%m-%dT%H:%M:%SZ}"
}

info() {
  color="${color:-34}"
  while read -r line; do
    >&2 echo -e "$(${return_cursor:-false} && printf "\r")[$(timestamp)] [${color}m${line}[0m"
  done < <(echo -e "$@")
}

info_r() {
  return_cursor=true info "$@"
}

warn() {
  color="${color:-44}" info "$@"
}

debug() {
  if ${VERBOSE:-false}; then
    info "$@"
  fi
}

print() {
  >&2 printf '%s' "$@"
}

error() {
  color=31 info "$@"
  exit 1
}

eval_cmd() {
  color=1 debug "$@"
  eval "$*"
}

cmd() {
  basename "$SCRIPT"
}

version() { 
  grep '^# --version' "$SCRIPT" | sed 's/^# --version[ ]*//' ||
  date -r "$SCRIPT" "+%Y.%m.%d"
}

cmd_and_version() {
  echo "$(cmd) (v$(version))"
}

help() {
  printf "[1m%s[22m\n\n" "$(cmd_and_version)"

  sed -n -e '/^# --help$/,/^$/{/^# --help$/d;/--help/d;p;}' < "$SCRIPT"  |
    # strip blank lines & stuff
    sed -E 's/^#( |[ ]*$)//g; $d' |
    ${MARKDOWN:=$(markdown_highlighter)}
}


WITHOUT_HELP=42 # special exit code to exit without printing help message
SCRIPT="${SCRIPT:-$1}"; shift

case "${1:-}" in
  -h|--help)
    help
  ;;
  -v|--version)
    cmd_and_version
  ;;
  *)
    # shellcheck disable=SC1090
    ( source "$SCRIPT" "$@" ) || {
      exit_code=$?
      # only print help if the parent was a shell
      # ie. to avoid *also* printing help for commands that call other bash--script subcommands
      [[ $(ps -o args= $PPID) =~ (bash|fish|zsh)$ ]] && [[ $exit_code -ne $WITHOUT_HELP ]] && help
      exit $exit_code
    }
  ;;
esac

